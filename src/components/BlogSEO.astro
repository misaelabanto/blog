---
import { SITE_TITLE } from '@/consts';

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  heroImage?: string;
  category?: string;
  tags?: string[];
  lang?: string;
  slug?: string;
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  category,
  tags = [],
  lang = 'en',
  slug = ''
} = Astro.props;

// Build canonical URL
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Build full image URL
const fullImageUrl = heroImage 
  ? new URL(heroImage, Astro.site).toString()
  : new URL('/blog-placeholder-1.jpg', Astro.site).toString();

// Author information
const authorName = 'Misael Abanto';
const authorUrl = 'https://misaelabanto.com';
const authorSocial = {
  twitter: '@_misaelabanto',
  github: 'https://github.com/misaelabanto',
  linkedin: 'https://linkedin.com/in/misaelabanto'
};

// Site information
const siteName = 'Misael Abanto';
const siteUrl = 'https://misaelabanto.com';

// Create JSON-LD structured data
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "image": {
    "@type": "ImageObject",
    "url": fullImageUrl,
    "width": 1200,
    "height": 630
  },
  "datePublished": pubDate.toISOString(),
  "dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
  "author": {
    "@type": "Person",
    "name": authorName,
    "url": authorUrl,
    "sameAs": [
      authorSocial.twitter.startsWith('@') ? `https://twitter.com/${authorSocial.twitter.slice(1)}` : authorSocial.twitter,
      authorSocial.github,
      authorSocial.linkedin
    ]
  },
  "publisher": {
    "@type": "Person",
    "name": authorName,
    "url": siteUrl,
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/favicon.svg', Astro.site).toString()
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.toString()
  },
  "url": canonicalURL.toString(),
  "isPartOf": {
    "@type": "Blog",
    "name": `${siteName} Blog`,
    "url": lang === 'es' ? `${siteUrl}/es/blog/` : `${siteUrl}/blog/`
  },
  "inLanguage": lang === 'es' ? 'es-ES' : 'en-US',
  ...(category && {
    "articleSection": category,
    "about": {
      "@type": "Thing",
      "name": category
    }
  }),
  ...(tags.length > 0 && {
    "keywords": tags.join(', '),
    "mentions": tags.map(tag => ({
      "@type": "Thing",
      "name": tag
    }))
  })
};

// Create breadcrumb structured data
const breadcrumbJsonLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": lang === 'es' ? `${siteUrl}/es/` : siteUrl
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Blog",
      "item": lang === 'es' ? `${siteUrl}/es/blog/` : `${siteUrl}/blog/`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": title,
      "item": canonicalURL.toString()
    }
  ]
};

// Reading time estimation (rough)
const readingTime = Math.max(1, Math.ceil(description.split(' ').length / 200)); // Assume ~200 words per minute
---

<!-- Enhanced OpenGraph for Blog Posts -->
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={fullImageUrl} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={title} />
<meta property="og:site_name" content={siteName} />
<meta property="og:locale" content={lang === 'es' ? 'es_ES' : 'en_US'} />

<!-- Article-specific OpenGraph -->
<meta property="article:published_time" content={pubDate.toISOString()} />
{updatedDate && <meta property="article:modified_time" content={updatedDate.toISOString()} />}
<meta property="article:author" content={authorName} />
{category && <meta property="article:section" content={category} />}
{tags.map(tag => <meta property="article:tag" content={tag} />)}

<!-- Enhanced Twitter Cards -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content={authorSocial.twitter} />
<meta name="twitter:creator" content={authorSocial.twitter} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={fullImageUrl} />
<meta name="twitter:image:alt" content={title} />

<!-- Additional meta tags for better SEO -->
<meta name="author" content={authorName} />
<meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
{category && <meta name="article:section" content={category} />}
{tags.length > 0 && <meta name="keywords" content={tags.join(', ')} />}

<!-- JSON-LD Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
<script type="application/ld+json" set:html={JSON.stringify(breadcrumbJsonLd)} />

<!-- Additional meta for social sharing -->
<meta name="theme-color" content="#2337ff" />
<meta name="msapplication-TileColor" content="#2337ff" />

<!-- Estimated reading time -->
<meta name="reading-time" content={`${readingTime} min read`} />